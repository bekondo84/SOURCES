/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.megatimgroup.views.operations;

import java.util.ResourceBundle;
import javax.swing.tree.DefaultMutableTreeNode;
import com.megatim.common.clients.CommonsUtilities;
import com.megatim.common.utilities.MessagesBundle;
import com.megatim.common.utilities.TypeOperation;
import com.megatimgroup.ebaytools.client.EbayMessage;
import com.megatimgroup.ebaytools.client.EbayMessageItem;
import com.megatimgroup.ebaytools.client.MessageType;
import com.megatimgroup.views.helper.ImportCellRender;
import com.megatimgroup.views.helper.ValidateErrorTDialog;
import com.megatimgroup.views.helper.ValidateErrorTModel;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.tree.TreePath;



/**
 *
 * @author Commercial_2
 */
public class ConsoleEditPanel extends javax.swing.JPanel 
   implements Observer{

    /**
     * Creates new form ConsoleEditPanel
     */
    public ConsoleEditPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        MessagesBundle.setBundle(ResourceBundle.getBundle("consolemessages"));
        rootNode = new DefaultMutableTreeNode(MessagesBundle.getMessage("console.title"));
        setBorder(javax.swing.BorderFactory.createTitledBorder(
            null, MessagesBundle.getMessage("Suivi des traitements ..."),
            javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
            javax.swing.border.TitledBorder.DEFAULT_POSITION,
            CommonsUtilities.getFontBorderGroupBox(),
            CommonsUtilities.COULEUR_TITRE_FRAME));
    jTree1 = new javax.swing.JTree(rootNode);
    jScrollPane1.setViewportView(jTree1);
    jTree1.setCellRenderer(new ImportCellRender());
    jTree1.expandPath(new TreePath(rootNode.getPath()));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
            .addGap(0, 0, 0))
    );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    private DefaultMutableTreeNode rootNode ;
    private ConsoleDialog _container ;
    private DefaultMutableTreeNode currentTreeNode =null;
    private static Object classLock = ConsoleEditPanel.class;
    
    /**
     * 
     * @param o
     * @param arg 
     */
    public void update(Observable o, Object arg) {
        //Affichage de la console
         /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                _container.setVisible(true);
            }
        });
        //Recuperation du messages
        EbayMessage message = (EbayMessage) arg ;        
        ConsoleWorker worker = new ConsoleWorker(message);
        worker.start();
//        System.out.println(ConsoleEditPanel.class+".update(Observable o, Object arg)  ::::::::::::::::::::::: "+o+"           "+arg+" ******** ");
    }
    
    /**
     * 
     */
     private class ConsoleWorker extends Thread{

//        private Observable mediator ;
        
        private EbayMessage message ;
        
        /**
         * 
         */
        public ConsoleWorker(EbayMessage messageDispatcher) {
            super();
            this.message = messageDispatcher;
        }
        

        @Override
        public void run() { 
            
            super.run();
//            System.out.println(BalanceEditPanel.class.getSimpleName()+". :::::::::::::::::::::::::::::::::::::::  "+message.getStatut().toString()+" :::: "+message.getErrors());
           synchronized(classLock) {
                if(message.getStatut().equals(MessageType.INITIAL)){

                    //Traitement de message initial
                    currentTreeNode = new DefaultMutableTreeNode(message);
        //            currentTreeNode.
                    //Creation des fils
                    buildNode(message.getElements());
                    //Ajout du noeud dans l'arbre
                    rootNode.add(currentTreeNode);

                }else{
                    //Ajout du dernier noeud
                    buildNode(message.getElements().get(message.getElements().size()-1));
                }
                //Sauvegarde des resultat
                if(message.getStatut().equals(MessageType.IN_ERROR)){
                   if(_container!=null){
                        
                        //Affichage de la fenetre des erreur
                        ValidateErrorTDialog errorDialog = new ValidateErrorTDialog(null, true, TypeOperation.VIEW, message.getErrors());
                         errorDialog.setModel(new ValidateErrorTModel());
                         errorDialog.setLocationRelativeTo(_container);
                         errorDialog.setVisible(true);
                    }
                }
                paint(getGraphics());
           }
        }
        
        
        
    }

    /**
     * 
     * @param _container 
     */
    public void setContainer(ConsoleDialog _container) {
        this._container = _container;
    }
    
    
    
    /**
     * Creation d'un noeud
     * @param item 
     */
    private void buildNode(EbayMessageItem item){
        
        //Creation du noeud
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(item);
        if(currentTreeNode!=null) currentTreeNode.add(node);
    }
    
    /**
     * 
     * @param items 
     */
    private void buildNode(List<EbayMessageItem> items){
        
        for(EbayMessageItem item : items){
            buildNode(item);
        }
    }

}
